package "tonyfettes/memory"

// Values
fn[T : Sized + Get + Set] blit(Memory[T], Int, Memory[T], Int, Int) -> Unit

let byte : Size

let double_ : Size

let float_ : Size

fn[T] free(Memory[T]) -> Unit

let int16 : Size

let int64 : Size

let int_ : Size

fn[T : Sized + Default + Get + Set] length(Memory[T]) -> Int

fn[T : Sized + Default + Set] malloc(Int) -> Memory[T]

fn[T : Sized + Default + Set] of_array(FixedArray[T]) -> Memory[T]

fn of_bytes(Bytes) -> Memory[Byte]

fn of_string(String) -> Memory[Byte]

fn[T : Sized + Default + Get + Set] realloc(Memory[T], Int) -> Memory[T]

fn sizeof(Size) -> Int

fn[T : Sized + Default + Get + Set] to_array(Memory[T]) -> FixedArray[T]

fn to_bytes(Memory[Byte]) -> Bytes

fn[T] to_int(Memory[T]) -> Int

fn to_string(Memory[Byte]) -> String

let uint : Size

let uint16 : Size

let uint64 : Size

// Types and methods
type Memory[_]
fn[T : Get] Memory::get(Self[T], Int) -> T
fn[T : Sized + Default + Get + Set] Memory::length(Self[T]) -> Int
fn[T : Sized + Get] Memory::op_get(Self[T], Int) -> T
fn[T : Sized + Set] Memory::op_set(Self[T], Int, T) -> Unit
fn[T : Set] Memory::set(Self[T], Int, T) -> Unit
fn[T : Sized + Default + Get + Set] Memory::to_array(Self[T]) -> FixedArray[T]
fn Memory::to_bytes(Self[Byte]) -> Bytes
fn[T] Memory::to_int(Self[T]) -> Int
fn Memory::to_string(Self[Byte]) -> String

type Size
fn Size::op_get(Self, Int) -> Self

// Type aliases

// Traits
pub trait Default {
  default() -> Self
}
impl Default for Byte
impl Default for Int
impl Default for Int16
impl Default for Int64
impl Default for UInt
impl Default for UInt16
impl Default for UInt64
impl Default for Float
impl Default for Double

trait Get
impl Get for Byte
impl Get for Int
impl Get for Int16
impl Get for Int64
impl Get for UInt
impl Get for UInt16
impl Get for UInt64
impl Get for Float
impl Get for Double

trait Set
impl Set for Byte
impl Set for Int
impl Set for Int16
impl Set for Int64
impl Set for UInt
impl Set for UInt16
impl Set for UInt64
impl Set for Float
impl Set for Double

pub(open) trait Sized {
  size() -> Int
}
impl Sized for Byte
impl Sized for Int
impl Sized for Int16
impl Sized for Int64
impl Sized for UInt
impl Sized for UInt16
impl Sized for UInt64
impl Sized for Float
impl Sized for Double

